import AsyncStorage from "@react-native-async-storage/async-storage";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import { getProfile, login, logout, register } from "../services/auth.service";
import { LoginBody, RegisterBody } from "../types/auth.type";
import { Profile } from "../types/user.type";
// import { removeItem, setItem } from "../utils/localStorage";
import { RootState } from "../utils/store";

export interface AuthState {
  profile: Profile | null;
  isLoading: boolean;
  isLoggedIn: boolean | null;
  accessToken?: string;
  // tokens: Tokens | null;
}

const initialState: AuthState = {
  profile: null,
  isLoading: true,
  isLoggedIn: null,
  accessToken: undefined,
  // tokens: null
};

export const loginAction = createAsyncThunk(
  "auth/loginAction",
  async (body: LoginBody, thunkAPI) => {
    const response = await login(body);

    const {
      mobileUserDTO: {
        token: { acessToken },
      },
    } = response;

    await thunkAPI.dispatch(getProfileAction(acessToken)).unwrap();

    AsyncStorage.setItem("token", acessToken);

    return {
      accessToken: acessToken,
    };
  },
);

export const registerAction = createAsyncThunk(
  "auth/registerAction",
  async (body: RegisterBody, thunkAPI) => {
    const response = await register(body);

    return response;
  },
);

export const logoutAction = createAsyncThunk(
  "auth/logout",
  async (
    body: {
      notificationToken?: string;
    },
    thunkAPI,
  ) => {
    const { notificationToken } = body;

    const state = thunkAPI.getState() as RootState;

    const { accessToken } = state.auth;

    if (accessToken) {
      await logout(accessToken, notificationToken);
    }

    thunkAPI.dispatch(resetState());

    AsyncStorage.removeItem("token");

    return true;
  },
);

export const getProfileAction = createAsyncThunk(
  "auth/getProfileAction",
  async (token: string, thunkAPI) => {
    const profile = await getProfile(token);

    return profile;
  },
);

export const restoreProfileAction = createAsyncThunk(
  "auth/restoreProfileAction",
  async (_, thunkAPI) => {
    const token = await AsyncStorage.getItem("token");

    if (token) {
      const user = await getProfile(token);

      return user;
    }
  },
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state, action: PayloadAction<Profile>) => {
      state.profile = action.payload;
      state.isLoading = false;
    },
    setIsLoggedIn: (state, action: PayloadAction<boolean>) => {
      state.isLoggedIn = action.payload;
    },
    resetState: () => initialState,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAction.fulfilled, (state, action) => {
        const { accessToken } = action.payload;
        state.accessToken = accessToken;
      })
      .addCase(loginAction.rejected, (state, action) => {
        const error = action.error;
        console.log("Login error: ", error);
      })
      .addCase(logoutAction.fulfilled, (state, action) => {
        state.profile = null;
      })
      .addCase(getProfileAction.fulfilled, (state, action) => {
        state.profile = action.payload;
      })
      .addCase(restoreProfileAction.fulfilled, (state, action) => {
        if (action.payload) {
          state.profile = action.payload;
        }
      });
  },
});

/**
 * Action exports
 */
export const { setUser, resetState, setIsLoggedIn } = authSlice.actions;

/**
 * Selectors
 */
export const selectProfile = (state: RootState) => state.auth.profile;
export const selectIsLoading = (state: RootState) => state.auth.isLoading;
export const selectIsLoggedIn = (state: RootState) => state.auth.isLoggedIn;

// export const selectTokens = (state: RootState) => state.auth.tokens;

/**
 * Reducer export
 */
export default authSlice.reducer;
